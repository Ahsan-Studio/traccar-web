openapi: 3.1.0
info:
  title: Traccar
  description: Traccar GPS tracking server API documentation. To use the API you need to have a server instance. For testing purposes you can use one of free [demo servers](https://www.traccar.org/demo-server/). For production use you can install your own server or get a [subscription service](https://www.traccar.org/product/tracking-server/).
  contact:
    name: Traccar Support
    url: https://www.traccar.org/
    email: support@traccar.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "6.8.1"
servers:
  - url: https://demo.traccar.org/api
    description: Demo Server 1
  - url: https://demo2.traccar.org/api
    description: Demo Server 2
  - url: https://demo3.traccar.org/api
    description: Demo Server 3
  - url: https://demo4.traccar.org/api
    description: Demo Server 4
  - url: https://server.traccar.org/api
    description: Subscription Server
  - url: http://{host}:{port}/api
    description: Other Server
    variables:
      host:
        default: localhost
      port:
        enum:
          - "8082"
          - "80"
        default: "8082"
security:
  - BasicAuth: []
  - ApiKey: []
tags:
  - name: Server
    description: Server information
  - name: Session
    description: User session management
  - name: Devices
    description: Device management
  - name: Groups
    description: Group management
  - name: Users
    description: User management
  - name: Permissions
    description: User permissions and other object linking
  - name: Positions
    description: Retrieving raw location information
  - name: Events
    description: Retrieving event information
  - name: Reports
    description: Reports generation
  - name: Notifications
    description: User notifications management
  - name: Sounds
    description: Sound file management for notification alerts
  - name: Geofences
    description: Geofence management
  - name: Commands
    description: Sending commands to devices and stored command management
  - name: Attributes
    description: Computed attributes management
  - name: Drivers
    description: Drivers management
  - name: Maintenance
    description: Maintenance management
  - name: Expenses
    description: Vehicle expense tracking and management
  - name: Calendars
    description: Calendar management
  - name: Statistics
    description: Retrieving server statistics
  - name: Services
    description: Vehicle service reminders and maintenance scheduling
  - name: Templates
    description: System template management for notifications and emails
  - name: User Templates
    description: User-specific template customization and management
  - name: SMS Configuration
    description: SMS configuration management for default and user-specific settings
  - name: Sub Accounts
    description: Sub-account management for creating limited-privilege user accounts
paths:
  /services:
    get:
      summary: Fetch a list of Services
      description: Without any params, returns a list of the user's services
      tags:
        - Services
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
        "400":
          description: No permission
          content: {}
    post:
      summary: Create a new Service
      tags: [Services]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: Service created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"

  /services/{id}:
    put:
      summary: Update a Service
      tags: [Services]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: Service updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
    delete:
      summary: Delete a Service
      tags: [Services]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Service deleted

  /services/device/{deviceId}:
    get:
      summary: Fetch all Services for a specific device
      tags: [Services]
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"

  /commands:
    get:
      summary: Fetch a list of Saved Commands
      tags:
        - Commands
      description: Without params, it returns a list of Saved Commands the user has access to
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
        - name: deviceId
          in: query
          description: Standard users can use this only with _deviceId_s, they have access to
          schema:
            type: integer
        - name: groupId
          in: query
          description: >-
            Standard users can use this only with _groupId_s, they have access
            to
          schema:
            type: integer
        - name: refresh
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Command"
    post:
      summary: Create a Saved Command
      tags:
        - Commands
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Command"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Command"
      x-codegen-request-body-name: body
  /commands/{id}:
    put:
      summary: Update a Saved Command
      tags:
        - Commands
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Command"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Command"
      x-codegen-request-body-name: body
    delete:
      summary: Delete a Saved Command
      tags:
        - Commands
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /commands/send:
    get:
      summary: Fetch a list of Saved Commands supported by Device at the moment
      description: >-
        Return a list of saved commands linked to Device and its groups,
        filtered by current Device protocol support
      tags:
        - Commands
      parameters:
        - name: deviceId
          in: query
          description: >-
            Standard users can use this only with _deviceId_s, they have access
            to
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Command"
        "400":
          description: Could happen when the user doesn't have permission for the device
          content: {}
    post:
      summary: Dispatch commands to device
      description: Dispatch a new command or Saved Command if _body.id_ set
      tags:
        - Commands
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Command"
        required: true
      responses:
        "200":
          description: Command sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Command"
        "202":
          description: Command queued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Command"
        "400":
          description: >-
            Could happen when the user doesn't have permission or an incorrect
            command _type_ for the device
          content: {}
      x-codegen-request-body-name: body
  /commands/types:
    get:
      summary: >-
        Fetch a list of available Commands for the Device or all possible
        Commands if Device ommited
      tags:
        - Commands
      parameters:
        - name: deviceId
          in: query
          description: >-
            Internal device identifier. Only works if device has already
            reported some locations
          schema:
            type: integer
        - name: protocol
          in: query
          description: Protocol name. Can be used instead of device id
          schema:
            type: string
        - name: textChannel
          in: query
          description: >-
            When `true` return SMS commands. If not specified or `false` return
            data commands
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommandType"
        "400":
          description: >-
            Could happen when trying to fetch from a device the user does not
            have permission
          content: {}
  /devices:
    get:
      summary: Fetch a list of Devices
      description: Without any params, returns a list of the user's devices
      tags:
        - Devices
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
        - name: id
          in: query
          description: >-
            To fetch one or more devices. Multiple params can be passed like
            `id=31&id=42`
          schema:
            type: integer
        - name: uniqueId
          in: query
          description: >-
            To fetch one or more devices. Multiple params can be passed like
            `uniqueId=333331&uniqieId=44442`
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"
        "400":
          description: No permission
          content: {}
    post:
      summary: Create a Device
      tags:
        - Devices
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Device"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
      x-codegen-request-body-name: body
  /devices/{id}:
    put:
      summary: Update a Device
      tags:
        - Devices
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Device"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
      x-codegen-request-body-name: body
    delete:
      summary: Delete a Device
      tags:
        - Devices
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /devices/{id}/accumulators:
    put:
      summary: Update total distance and hours of the Device
      tags:
        - Devices
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceAccumulators"
        required: true
      responses:
        "204":
          description: No Content
          content: {}
      x-codegen-request-body-name: body
  /groups:
    get:
      summary: Fetch a list of Groups
      description: Without any params, returns a list of the Groups the user belongs to
      tags:
        - Groups
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
    post:
      summary: Create a Group
      tags:
        - Groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: No permission
          content: {}
      x-codegen-request-body-name: body
  /groups/{id}:
    put:
      summary: Update a Group
      tags:
        - Groups
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
      x-codegen-request-body-name: body
    delete:
      summary: Delete a Group
      tags:
        - Groups
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /permissions:
    post:
      summary: Link an Object to another Object
      tags:
        - Permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Permission"
        required: true
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: No permission
          content: {}
      x-codegen-request-body-name: body
    delete:
      summary: Unlink an Object from another Object
      tags:
        - Permissions
      parameters:
        - name: body
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Permission"
      responses:
        "204":
          description: No Content
          content: {}
  /positions:
    get:
      summary: Fetches a list of Positions
      description: >-
        We strongly recommend using [Traccar WebSocket
        API](https://www.traccar.org/traccar-api/) instead of periodically
        polling positions endpoint. Without any params, it returns a list of
        last known positions for all the user's Devices. _from_ and _to_ fields
        are not required with _id_.
      tags:
        - Positions
      parameters:
        - name: deviceId
          in: query
          description: >-
            _deviceId_ is optional, but requires the _from_ and _to_ parameters
            when used
          schema:
            type: integer
        - name: from
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          schema:
            type: string
            format: date-time
        - name: id
          in: query
          description: >-
            To fetch one or more positions. Multiple params can be passed like
            `id=31&id=42`
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
            text/csv:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
            application/gpx+xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
    delete:
      summary: Deletes all the Positions of a device in the time span specified
      description: ""
      tags:
        - Positions
      parameters:
        - name: deviceId
          in: query
          description: ""
          schema:
            type: integer
          required: true
        - name: from
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          schema:
            type: string
            format: date-time
          required: true
        - name: to
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          schema:
            type: string
            format: date-time
          required: true
      responses:
        "204":
          description: No Content
          content: {}
        "400":
          description: Bad Request
          content: {}
  /positions/{id}:
    delete:
      summary: Delete a Position
      tags:
        - Positions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
        "404":
          description: Not Found
          content: {}
  /server:
    get:
      summary: Fetch Server information
      tags:
        - Server
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Server"
    put:
      summary: Update Server information
      tags:
        - Server
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Server"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Server"
      x-codegen-request-body-name: body
  /session:
    get:
      summary: Fetch Session information
      tags:
        - Session
      parameters:
        - name: token
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: Not Found
          content: {}
    post:
      summary: Create a new Session
      tags:
        - Session
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content: {}
    delete:
      summary: Close the Session
      tags:
        - Session
      responses:
        "204":
          description: No Content
          content: {}
  /session/openid/auth:
    get:
      summary: Fetch Session information
      tags:
        - Session
      responses:
        "303":
          description: Redirect to OpenID Connect identity provider
          content: {}
  /session/openid/callback:
    get:
      summary: OpenID Callback
      tags:
        - Session
      responses:
        "303":
          description: Successful authentication, redirect to homepage
          content: {}
  /configurations:
    get:
      summary: Fetch a list of Configurations
      description: Fetch all system configurations. Only available to administrators.
      tags:
        - SMS Configuration
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Configuration"
        "403":
          description: Access denied - Admin required
          content: {}
    post:
      summary: Create a new Configuration
      description: Add a new system configuration. Only available to administrators.
      tags:
        - SMS Configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Configuration"
        required: true
      responses:
        "200":
          description: Configuration created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Configuration"
        "403":
          description: Access denied - Admin required
          content: {}
  /configurations/{id}:
    put:
      summary: Update a Configuration
      description: Update an existing system configuration. Only available to administrators.
      tags:
        - SMS Configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Configuration"
        required: true
      responses:
        "200":
          description: Configuration updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Configuration"
        "403":
          description: Access denied - Admin required
          content: {}
        "404":
          description: Configuration not found
          content: {}
    delete:
      summary: Delete a Configuration
      description: Remove a system configuration. Only available to administrators.
      tags:
        - SMS Configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Configuration deleted
        "403":
          description: Access denied - Admin required
          content: {}
        "404":
          description: Configuration not found
          content: {}
  /user-sms-configs:
    get:
      summary: Fetch user SMS configurations
      description: Fetch SMS configurations for a specific user or current user
      tags:
        - SMS Configuration
      parameters:
        - name: userId
          in: query
          description: User ID to fetch SMS configurations for. If not provided, returns current user's configurations.
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserSmsConfig"
        "403":
          description: Access denied
          content: {}
    post:
      summary: Create a user SMS configuration
      description: Add a new SMS configuration for a user
      tags:
        - SMS Configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSmsConfig"
        required: true
      responses:
        "200":
          description: User SMS configuration created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSmsConfig"
        "400":
          description: User already has SMS configuration
          content: {}
        "403":
          description: Access denied
          content: {}
  /user-sms-configs/{id}:
    put:
      summary: Update a user SMS configuration
      description: Update an existing user SMS configuration
      tags:
        - SMS Configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSmsConfig"
        required: true
      responses:
        "200":
          description: User SMS configuration updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSmsConfig"
        "403":
          description: Access denied
          content: {}
        "404":
          description: SMS configuration not found
          content: {}
    delete:
      summary: Delete a user SMS configuration
      description: Remove a user SMS configuration
      tags:
        - SMS Configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: User SMS configuration deleted
        "403":
          description: Access denied
          content: {}
        "404":
          description: SMS configuration not found
          content: {}
  /users:
    get:
      summary: Fetch a list of Users
      tags:
        - Users
      parameters:
        - name: userId
          in: query
          description: Can only be used by admin or manager users
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: No Permission
          content: {}
    post:
      summary: Create a User
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      x-codegen-request-body-name: body
  /users/{id}:
    put:
      summary: Update a User
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      x-codegen-request-body-name: body
    delete:
      summary: Delete a User
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /notifications:
    get:
      summary: Fetch a list of Notifications
      description: >-
        Without params, it returns a list of Notifications the user has access
        to
      tags:
        - Notifications
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
        - name: deviceId
          in: query
          description: >-
            Standard users can use this only with _deviceId_s, they have access
            to
          schema:
            type: integer
        - name: groupId
          in: query
          description: >-
            Standard users can use this only with _groupId_s, they have access
            to
          schema:
            type: integer
        - name: refresh
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
    post:
      summary: Create a Notification
      tags:
        - Notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notification"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
      x-codegen-request-body-name: body
  /notifications/{id}:
    put:
      summary: Update a Notification
      tags:
        - Notifications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notification"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
      x-codegen-request-body-name: body
    delete:
      summary: Delete a Notification
      tags:
        - Notifications
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /notifications/types:
    get:
      summary: Fetch a list of available Notification types
      tags:
        - Notifications
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationType"
  /notifications/test:
    post:
      summary: Send test notification to current user via Email and SMS
      tags:
        - Notifications
      responses:
        "204":
          description: Successful sending
          content: {}
        "400":
          description: Could happen if sending has failed
          content: {}
  /sounds:
    get:
      summary: Fetch a list of available sound files
      description: Returns a list of sound files available for notification alerts. Admin only.
      tags:
        - Sounds
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SoundFile"
        "403":
          description: Forbidden - Admin access required
          content: {}
  /sounds/{filename}:
    delete:
      summary: Delete a sound file
      description: Delete a sound file from the server. Admin only.
      tags:
        - Sounds
      parameters:
        - name: filename
          in: path
          required: true
          description: Name of the sound file to delete
          schema:
            type: string
          example: "alarm1.mp3"
      responses:
        "204":
          description: No Content - File deleted successfully
          content: {}
        "403":
          description: Forbidden - Admin access required
          content: {}
        "404":
          description: Not Found - Sound file does not exist
          content: {}
  /events/history:
    get:
      summary: Fetch event history with pagination and search
      description: >-
        Query historical events with optional filters, pagination, and search. Without deviceId, returns events 
        for all user's devices. Users can only see events for devices they have access to.
        The response includes pagination metadata.
      tags:
        - Events
      parameters:
        - name: deviceId
          in: query
          description: Filter by specific device ID
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Filter by event type (e.g., deviceOverspeed, geofenceEnter)
          schema:
            type: string
        - name: from
          in: query
          description: Start date/time in ISO 8601 format
          schema:
            type: string
            format: date-time
          example: "2025-10-01T00:00:00Z"
        - name: to
          in: query
          description: End date/time in ISO 8601 format
          schema:
            type: string
            format: date-time
          example: "2025-10-31T23:59:59Z"
        - name: search
          in: query
          description: Search keyword for device name or event type (case-insensitive)
          schema:
            type: string
          example: "alarm"
        - name: page
          in: query
          description: Page number (default 1, minimum 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page (default 20, max 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: OK - Returns paginated events with metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"
                  total:
                    type: integer
                    description: Total number of events matching the filters
                  page:
                    type: integer
                    description: Current page number
                  pageSize:
                    type: integer
                    description: Number of items per page
                  totalPages:
                    type: integer
                    description: Total number of pages
                example:
                  data: []
                  total: 150
                  page: 1
                  pageSize: 20
                  totalPages: 8
        "403":
          description: Forbidden - No permission to access device
          content: {}
    delete:
      summary: Clear multiple events with filters
      description: >-
        Delete multiple events matching the specified filters. Returns the count 
        of deleted events. Users can only delete events for devices they have access to.
      tags:
        - Events
      parameters:
        - name: deviceId
          in: query
          description: Filter by specific device ID
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Filter by event type
          schema:
            type: string
        - name: from
          in: query
          description: Start date/time in ISO 8601 format
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End date/time in ISO 8601 format
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK - Returns count of deleted events
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
                    description: Number of events deleted
                example:
                  deleted: 42
        "403":
          description: Forbidden - No permission or readonly user
          content: {}
  /events/history/{id}:
    delete:
      summary: Delete a specific event from history
      description: Delete a single event by its ID. Users can only delete events for devices they have access to.
      tags:
        - Events
      parameters:
        - name: id
          in: path
          required: true
          description: Event ID to delete
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content - Event deleted successfully
          content: {}
        "403":
          description: Forbidden - No permission or readonly user
          content: {}
        "404":
          description: Not Found - Event does not exist
          content: {}
  /geofences:
    get:
      summary: Fetch a list of Geofences
      description: Without params, it returns a list of Geofences the user has access to
      tags:
        - Geofences
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
        - name: deviceId
          in: query
          description: >-
            Standard users can use this only with _deviceId_s, they have access
            to
          schema:
            type: integer
        - name: groupId
          in: query
          description: >-
            Standard users can use this only with _groupId_s, they have access
            to
          schema:
            type: integer
        - name: refresh
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Geofence"
    post:
      summary: Create a Geofence
      tags:
        - Geofences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Geofence"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
      x-codegen-request-body-name: body
  /geofences/{id}:
    put:
      summary: Update a Geofence
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Geofence"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
      x-codegen-request-body-name: body
    delete:
      summary: Delete a Geofence
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /geofence-groups:
    get:
      summary: Fetch a list of Geofence Groups
      description: Returns geofence groups for organizing markers, zones, and routes
      tags:
        - Geofences
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GeofenceGroup"
    post:
      summary: Create a Geofence Group
      description: Creates a new group for organizing geofences
      tags:
        - Geofences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeofenceGroup"
            examples:
              basic:
                summary: Basic geofence group
                value:
                  name: "Customer Locations"
                  description: "All customer site markers"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeofenceGroup"
  /geofence-groups/{id}:
    put:
      summary: Update a Geofence Group
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeofenceGroup"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeofenceGroup"
    delete:
      summary: Delete a Geofence Group
      description: Deletes a group but does not delete the geofences in it
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /markers:
    get:
      summary: Fetch a list of Markers
      description: |
        Returns only CIRCLE geofences with type='marker'. Legacy compatibility endpoint.

        Markers are point-based locations with a radius (e.g., offices, warehouses, customer sites).
      tags:
        - Geofences
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own userId
          schema:
            type: integer
        - name: groupId
          in: query
          description: Filter by device group
          schema:
            type: integer
        - name: deviceId
          in: query
          description: Filter by device
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Geofence"
    post:
      summary: Create a Marker
      description: |
        Creates a CIRCLE geofence with type='marker'.

        **Validation:**
        - Area must be in CIRCLE format: `CIRCLE (lat lng, radius)`
        - Type is automatically set to 'marker'
        - Default color: #4CAF50
      tags:
        - Geofences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Geofence"
            examples:
              basic:
                summary: Basic marker
                value:
                  name: "Office HQ"
                  description: "Main office location"
                  area: "CIRCLE (37.7749 -122.4194, 300)"
                  groupId: 1
                  attributes:
                    color: "#4CAF50"
                    icon: "office.png"
                    visible: true
              without_group:
                summary: Marker without group
                value:
                  name: "Standalone Marker"
                  area: "CIRCLE (37.7749 -122.4194, 300)"
                  attributes:
                    color: "#4CAF50"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
        "400":
          description: Bad Request - Marker must use CIRCLE geometry
          content: {}
  /markers/{id}:
    put:
      summary: Update a Marker
      description: Updates a marker geofence. Area must remain CIRCLE format.
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Geofence"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
        "400":
          description: Bad Request - Marker must use CIRCLE geometry
          content: {}
    delete:
      summary: Delete a Marker
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /zones:
    get:
      summary: Fetch a list of Zones
      description: |
        Returns only POLYGON geofences with type='zone'. Legacy compatibility endpoint.

        Zones are polygon areas for entry/exit detection (e.g., restricted zones, service areas).
      tags:
        - Geofences
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own userId
          schema:
            type: integer
        - name: groupId
          in: query
          description: Filter by device group
          schema:
            type: integer
        - name: deviceId
          in: query
          description: Filter by device
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Geofence"
    post:
      summary: Create a Zone
      description: |
        Creates a POLYGON geofence with type='zone'.

        **Validation:**
        - Area must be in POLYGON format: `POLYGON ((lat1 lng1, lat2 lng2, ...))`
        - Type is automatically set to 'zone'
        - Default color: #FF5733
      tags:
        - Geofences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Geofence"
            examples:
              basic:
                summary: Basic zone
                value:
                  name: "Restricted Area"
                  description: "No entry zone"
                  area: "POLYGON ((37.7749 -122.4194, 37.7750 -122.4180, 37.7740 -122.4185, 37.7749 -122.4194))"
                  groupId: 2
                  attributes:
                    color: "#FF5733"
                    visible: true
                    nameVisible: true
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
        "400":
          description: Bad Request - Zone must use POLYGON geometry
          content: {}
  /zones/{id}:
    put:
      summary: Update a Zone
      description: Updates a zone geofence. Area must remain POLYGON format.
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Geofence"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
        "400":
          description: Bad Request - Zone must use POLYGON geometry
          content: {}
    delete:
      summary: Delete a Zone
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /routes:
    get:
      summary: Fetch a list of Routes
      description: |
        Returns only LINESTRING geofences with type='route'. Legacy compatibility endpoint.

        Routes are polyline paths with deviation tolerance for route compliance monitoring.
      tags:
        - Geofences
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own userId
          schema:
            type: integer
        - name: groupId
          in: query
          description: Filter by device group
          schema:
            type: integer
        - name: deviceId
          in: query
          description: Filter by device
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Geofence"
    post:
      summary: Create a Route
      description: |
        Creates a LINESTRING geofence with type='route'.

        **Validation:**
        - Area must be in LINESTRING format: `LINESTRING (lat1 lng1, lat2 lng2, ...)`
        - Type is automatically set to 'route'
        - Default color: #2196F3
        - Default polylineDistance: 100 meters
      tags:
        - Geofences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Geofence"
            examples:
              basic:
                summary: Basic route
                value:
                  name: "Delivery Route 1"
                  description: "Main delivery path"
                  area: "LINESTRING (37.7749 -122.4194, 37.7750 -122.4180, 37.7760 -122.4170)"
                  groupId: 3
                  attributes:
                    color: "#2196F3"
                    visible: true
                    nameVisible: true
                    polylineDistance: 150
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
        "400":
          description: Bad Request - Route must use LINESTRING geometry
          content: {}
  /routes/{id}:
    put:
      summary: Update a Route
      description: Updates a route geofence. Area must remain LINESTRING format.
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Geofence"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Geofence"
        "400":
          description: Bad Request - Route must use LINESTRING geometry
          content: {}
    delete:
      summary: Delete a Route
      tags:
        - Geofences
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /events/{id}:
    get:
      tags:
        - Events
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
  /reports/route:
    get:
      summary: >-
        Fetch a list of Positions within the time period for the Devices or
        Groups
      description: At least one _deviceId_ or one _groupId_ must be passed
      tags:
        - Reports
      parameters:
        - name: deviceId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: groupId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: from
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
  /reports/events:
    get:
      summary: Fetch a list of Events within the time period for the Devices or Groups
      description: At least one _deviceId_ or one _groupId_ must be passed
      tags:
        - Reports
      parameters:
        - name: deviceId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: groupId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: type
          in: query
          description: "% can be used to return events of all types"
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: from
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
  /reports/summary:
    get:
      summary: >-
        Fetch a list of ReportSummary within the time period for the Devices or
        Groups
      description: At least one _deviceId_ or one _groupId_ must be passed
      tags:
        - Reports
      parameters:
        - name: deviceId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: groupId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: from
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportSummary"
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportSummary"
  /reports/trips:
    get:
      summary: >-
        Fetch a list of ReportTrips within the time period for the Devices or
        Groups
      description: At least one _deviceId_ or one _groupId_ must be passed
      tags:
        - Reports
      parameters:
        - name: deviceId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: groupId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: from
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportTrips"
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportTrips"
  /reports/stops:
    get:
      summary: >-
        Fetch a list of ReportStops within the time period for the Devices or
        Groups
      description: At least one _deviceId_ or one _groupId_ must be passed
      tags:
        - Reports
      parameters:
        - name: deviceId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: groupId
          in: query
          style: form
          explode: true
          schema:
            type: array
            items:
              type: integer
        - name: from
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportStops"
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportStops"
  /statistics:
    get:
      summary: Fetch server Statistics
      tags:
        - Statistics
      parameters:
        - name: from
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Statistics"
  /calendars:
    get:
      summary: Fetch a list of Calendars
      description: Without params, it returns a list of Calendars the user has access to
      tags:
        - Calendars
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Calendar"
    post:
      summary: Create a Calendar
      tags:
        - Calendars
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Calendar"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Calendar"
      x-codegen-request-body-name: body
  /calendars/{id}:
    put:
      summary: Update a Calendar
      tags:
        - Calendars
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Calendar"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Calendar"
      x-codegen-request-body-name: body
    delete:
      summary: Delete a Calendar
      tags:
        - Calendars
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /attributes/computed:
    get:
      summary: Fetch a list of Attributes
      description: Without params, it returns a list of Attributes the user has access to
      tags:
        - Attributes
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
        - name: deviceId
          in: query
          description: >-
            Standard users can use this only with _deviceId_s, they have access
            to
          schema:
            type: integer
        - name: groupId
          in: query
          description: >-
            Standard users can use this only with _groupId_s, they have access
            to
          schema:
            type: integer
        - name: refresh
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attribute"
    post:
      summary: Create an Attribute
      tags:
        - Attributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
      x-codegen-request-body-name: body
  /attributes/computed/{id}:
    put:
      summary: Update an Attribute
      tags:
        - Attributes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attribute"
      x-codegen-request-body-name: body
    delete:
      summary: Delete an Attribute
      tags:
        - Attributes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /drivers:
    get:
      summary: Fetch a list of Drivers
      description: Without params, it returns a list of Drivers the user has access to
      tags:
        - Drivers
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
        - name: deviceId
          in: query
          description: >-
            Standard users can use this only with _deviceId_s, they have access
            to
          schema:
            type: integer
        - name: groupId
          in: query
          description: >-
            Standard users can use this only with _groupId_s, they have access
            to
          schema:
            type: integer
        - name: refresh
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Driver"
    post:
      summary: Create a Driver
      tags:
        - Drivers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Driver"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
      x-codegen-request-body-name: body
  /drivers/{id}/image:
    post:
      summary: Upload a Driver image
      description: Upload raw image bytes for the driver. Content-Type must be one of image/jpeg, image/png, image/gif, image/webp, image/svg+xml. Max 10 MB. Requires MEDIA_PATH to be configured on the server.
      tags:
        - Drivers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Not Found
          content: {}
    get:
      summary: Get a Driver image
      tags:
        - Drivers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "307":
          description: Temporary Redirect to actual image URL
          headers:
            Location:
              schema:
                type: string
        "404":
          description: Not Found
          content: {}
  /drivers/{id}:
    put:
      summary: Update a Driver
      tags:
        - Drivers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Driver"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
      x-codegen-request-body-name: body
    delete:
      summary: Delete a Driver
      tags:
        - Drivers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /maintenance:
    get:
      summary: Fetch a list of Maintenance
      description: Without params, it returns a list of Maintenance the user has access to
      tags:
        - Maintenance
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
        - name: deviceId
          in: query
          description: >-
            Standard users can use this only with _deviceId_s, they have access
            to
          schema:
            type: integer
        - name: groupId
          in: query
          description: >-
            Standard users can use this only with _groupId_s, they have access
            to
          schema:
            type: integer
        - name: refresh
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Maintenance"
    post:
      summary: Create a Maintenance
      tags:
        - Maintenance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Maintenance"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
      x-codegen-request-body-name: body
  /maintenance/{id}:
    put:
      summary: Update a Maintenance
      tags:
        - Maintenance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Maintenance"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Maintenance"
      x-codegen-request-body-name: body
    delete:
      summary: Delete a Maintenance
      tags:
        - Maintenance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
  /expenses:
    get:
      summary: Fetch a list of Expenses
      description: Without params, it returns a list of Expenses the user has access to
      tags:
        - Expenses
      parameters:
        - name: all
          in: query
          description: Can only be used by admins or managers to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own _userId_
          schema:
            type: integer
        - name: deviceId
          in: query
          description: >-
            Standard users can use this only with _deviceId_s, they have access
            to
          schema:
            type: integer
        - name: groupId
          in: query
          description: >-
            Standard users can use this only with _groupId_s, they have access
            to
          schema:
            type: integer
        - name: from
          in: query
          description: Start date for expense date range in ISO 8601 format
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End date for expense date range in ISO 8601 format
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Expense"
        "400":
          description: Bad Request - Invalid query parameters
        "401":
          description: Unauthorized - Authentication required
        "403":
          description: Forbidden - User doesn't have permission to view expenses
    post:
      summary: Create an Expense
      description: Create a new expense record associated with a device
      tags:
        - Expenses
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Expense"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "400":
          description: Bad Request - Validation failed (name, deviceId, expenseDate required; quantity > 0; cost >= 0)
        "401":
          description: Unauthorized - Authentication required
        "403":
          description: Forbidden - User doesn't have permission to create expenses or access the device
      x-codegen-request-body-name: body
  /expenses/{id}:
    get:
      summary: Fetch a single Expense
      description: Retrieve details of a specific expense by ID
      tags:
        - Expenses
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "401":
          description: Unauthorized - Authentication required
        "403":
          description: Forbidden - User doesn't have permission to view this expense
        "404":
          description: Not Found - Expense not found
    put:
      summary: Update an Expense
      description: Update an existing expense record. Can change device association by updating deviceId.
      tags:
        - Expenses
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Expense"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "400":
          description: Bad Request - Invalid input data or ID mismatch
        "401":
          description: Unauthorized - Authentication required
        "403":
          description: Forbidden - User doesn't have permission to update this expense or access the device
        "404":
          description: Not Found - Expense or device not found
      x-codegen-request-body-name: body
    delete:
      summary: Delete an Expense
      description: Delete an expense record and all its associations
      tags:
        - Expenses
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized - Authentication required
        "403":
          description: Forbidden - User doesn't have permission to delete this expense
        "404":
          description: Not Found - Expense not found
  /templates:
    get:
      summary: Fetch a list of System Templates
      description: Retrieve system-wide templates with multi-language support. Admin access required for management operations.
      tags:
        - Templates
      parameters:
        - name: all
          in: query
          description: Can only be used by admins to fetch all templates
          schema:
            type: boolean
        - name: name
          in: query
          description: Filter templates by name
          schema:
            type: string
        - name: language
          in: query
          description: Filter templates by language (e.g., "english", "spanish")
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Template"
        "400":
          description: No permission
          content: {}
    post:
      summary: Create a System Template
      description: Create a new system template. Admin access required.
      tags:
        - Templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "403":
          description: Admin access required
          content: {}
      x-codegen-request-body-name: body
  /templates/by-name/{name}:
    get:
      summary: Get System Template by Name
      description: Retrieve a system template by name with automatic language fallback to English
      tags:
        - Templates
      parameters:
        - name: name
          in: path
          required: true
          description: Template name (e.g., "event_email", "account_registration")
          schema:
            type: string
        - name: language
          in: query
          description: Preferred language, falls back to English if not found
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "404":
          description: Template not found
          content: {}
  /templates/{id}:
    put:
      summary: Update a System Template
      description: Update an existing system template. Admin access required.
      tags:
        - Templates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "403":
          description: Admin access required
          content: {}
      x-codegen-request-body-name: body
    delete:
      summary: Delete a System Template
      description: Delete a system template. Admin access required.
      tags:
        - Templates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
        "403":
          description: Admin access required
          content: {}
  /templates/languages:
    get:
      summary: Get Available Template Languages
      description: Retrieve a list of all available template languages
      tags:
        - Templates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /templates/names:
    get:
      summary: Get Available Template Names
      description: Retrieve a list of all available template names, optionally filtered by language
      tags:
        - Templates
      parameters:
        - name: language
          in: query
          description: Filter by language
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /user-templates:
    get:
      summary: Fetch a list of User Templates
      description: Retrieve user-specific custom templates. Users can only access their own templates.
      tags:
        - User Templates
      parameters:
        - name: all
          in: query
          description: Can only be used by admins to fetch all user templates
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own userId
          schema:
            type: integer
        - name: name
          in: query
          description: Filter templates by name
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserTemplate"
        "400":
          description: No permission
          content: {}
    post:
      summary: Create a User Template
      description: Create a new user-specific template for customizing notifications
      tags:
        - User Templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTemplate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTemplate"
      x-codegen-request-body-name: body
  /user-templates/by-name/{name}:
    get:
      summary: Get User Template by Name
      description: Retrieve a user-specific template by name
      tags:
        - User Templates
      parameters:
        - name: name
          in: path
          required: true
          description: Template name
          schema:
            type: string
        - name: userId
          in: query
          description: User ID (defaults to current user)
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTemplate"
        "404":
          description: Template not found
          content: {}
  /user-templates/{id}:
    put:
      summary: Update a User Template
      description: Update an existing user template. Users can only update their own templates.
      tags:
        - User Templates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTemplate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTemplate"
        "403":
          description: No permission to update this template
          content: {}
      x-codegen-request-body-name: body
    delete:
      summary: Delete a User Template
      description: Delete a user template. Users can only delete their own templates.
      tags:
        - User Templates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
          content: {}
        "403":
          description: No permission to delete this template
          content: {}
  /subaccounts:
    get:
      summary: Fetch a list of Sub Accounts
      description: Without any params, returns a list of the user's sub accounts
      tags:
        - Sub Accounts
      parameters:
        - name: all
          in: query
          description: Can only be used by admins to fetch all entities
          schema:
            type: boolean
        - name: userId
          in: query
          description: Standard users can use this only with their own userId
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      summary: Create a Sub Account
      description: |
        Creates a new sub-account under the current manager user. The sub-account will be created as a User with parentUserId set to the manager's ID.

        **Permission Management:**
        - Device permissions are automatically created based on `deviceAccess` field (comma-separated device IDs)
        - Geofence permissions are automatically created for markers, zones, and routes based on `markerAccess`, `zoneAccess`, and `routeAccess` fields
        - All specified IDs are validated to ensure the resources exist before creating permissions

        **Auto-login Token:**
        - If `autoUrlActive` is true and `autoUrlToken` is not provided, a random 32-character token will be generated

        **Password:**
        - Password is automatically hashed using secure hashing algorithm before storage
      tags:
        - Sub Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            examples:
              basic:
                summary: Basic sub-account
                value:
                  name: "Sub Account User"
                  email: "subuser@example.com"
                  password: "password123"
                  parentUserId: 5
              with_permissions:
                summary: Sub-account with device and geofence access
                value:
                  name: "Delivery Driver"
                  email: "driver@example.com"
                  password: "driver123"
                  parentUserId: 5
                  deviceAccess: "1,2,5,8"
                  markerAccess: "10,11,15"
                  zoneAccess: "3,4"
                  routeAccess: "6,7,9"
                  dashboard: true
                  history: true
                  reports: false
              with_autologin:
                summary: Sub-account with auto-login URL
                value:
                  name: "Mobile User"
                  email: "mobile@example.com"
                  password: "mobile123"
                  parentUserId: 5
                  autoUrlActive: true
                  deviceAccess: "1,2"
        required: true
      responses:
        "200":
          description: OK - Sub-account created successfully with permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request - Invalid parent user or device/geofence IDs
        "403":
          description: Forbidden - User does not have manager privileges
  /subaccounts/legacy:
    post:
      summary: Create or update a Sub Account (Legacy format)
      description: |
        Legacy endpoint compatible with old system form-data format for backward compatibility.

        **Permission Management:**
        - Device permissions: `imei` parameter (comma-separated device IDs)
        - Marker permissions: `marker` parameter (comma-separated marker geofence IDs)
        - Zone permissions: `zone` parameter (comma-separated zone geofence IDs)
        - Route permissions: `route` parameter (comma-separated route geofence IDs)
        - All permissions are automatically created/updated via `tc_user_geofence` and `tc_user_device` tables

        **Create vs Update:**
        - If `subaccount_id` is "false", creates a new sub-account
        - If `subaccount_id` is a valid ID, updates the existing sub-account
      tags:
        - Sub Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                cmd:
                  type: string
                  enum: [save_subaccount]
                subaccount_id:
                  type: string
                  description: false for new account, ID for update
                active:
                  type: boolean
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                send:
                  type: boolean
                account_expire:
                  type: boolean
                account_expire_dt:
                  type: string
                  format: date
                dashboard:
                  type: boolean
                history:
                  type: boolean
                reports:
                  type: boolean
                tasks:
                  type: boolean
                rilogbook:
                  type: boolean
                dtc:
                  type: boolean
                maintenance:
                  type: boolean
                expenses:
                  type: boolean
                object_control:
                  type: boolean
                image_gallery:
                  type: boolean
                chat:
                  type: boolean
                imei:
                  type: string
                  description: Comma-separated device IMEIs
                marker:
                  type: string
                  description: Comma-separated marker IDs
                route:
                  type: string
                  description: Comma-separated route IDs
                zone:
                  type: string
                  description: Comma-separated zone IDs
                au_active:
                  type: boolean
                au:
                  type: string
                  description: Auto-login URL token
              required:
                - cmd
                - username
                - email
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid command or parameters
        "404":
          description: SubAccount not found (for updates)
  /subaccounts/{id}:
    get:
      summary: Fetch a Sub Account
      tags:
        - Sub Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: SubAccount not found
    put:
      summary: Update a Sub Account
      description: |
        Updates an existing sub-account. The manager must have permission to manage this sub-account.

        **Permission Management:**
        - If `deviceAccess` field is provided, all existing device permissions are removed and new ones are created
        - If `markerAccess`, `zoneAccess`, or `routeAccess` fields are provided, all existing geofence permissions are removed and new ones are created
        - Empty string removes all permissions for that type
        - Permissions are only updated if the corresponding access field is present in the request

        **Password Update:**
        - If password field is provided, it will be hashed and updated
        - If password is not provided or empty, the existing password remains unchanged

        **Auto-login Token:**
        - If `autoUrlActive` is true and `autoUrlToken` is empty, a new token will be generated
      tags:
        - Sub Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            examples:
              update_permissions:
                summary: Update device and geofence permissions
                value:
                  id: 10
                  deviceAccess: "1,2,3"
                  markerAccess: "5,6"
                  zoneAccess: "7"
                  routeAccess: ""
              update_password:
                summary: Update password only
                value:
                  id: 10
                  password: "newpassword123"
        required: true
      responses:
        "200":
          description: OK - Sub-account updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request - Invalid parent user or device/geofence IDs
        "403":
          description: Forbidden - User does not have permission to update this sub-account
        "404":
          description: SubAccount not found
    delete:
      summary: Delete a Sub Account
      tags:
        - Sub Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: SubAccount not found
  /subaccounts/{id}/regenerate-token:
    post:
      summary: Regenerate auto-login token for Sub Account
      tags:
        - Sub Accounts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: SubAccount not found
components:
  schemas:
    Position:
      type: object
      properties:
        id:
          type: integer
          format: int64
        deviceId:
          type: integer
          format: int64
        protocol:
          type: string
        deviceTime:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
        fixTime:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
        serverTime:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
        outdated:
          type: boolean
        valid:
          type: boolean
        latitude:
          type: number
        longitude:
          type: number
        altitude:
          type: number
        speed:
          type: number
          description: in knots
        course:
          type: number
        address:
          type: string
        accuracy:
          type: number
        network:
          type: object
          properties: {}
        geofenceIds:
          type: array
          items:
            type: integer
        attributes:
          type: object
          properties: {}
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        login:
          type: string
          nullable: true
        email:
          type: string
        phone:
          type: string
          nullable: true
        readonly:
          type: boolean
        administrator:
          type: boolean
        map:
          type: string
          nullable: true
        latitude:
          type: number
        longitude:
          type: number
        zoom:
          type: integer
        password:
          type: string
        coordinateFormat:
          type: string
          nullable: true
        disabled:
          type: boolean
        expirationTime:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          nullable: true
        deviceLimit:
          type: integer
        userLimit:
          type: integer
        deviceReadonly:
          type: boolean
        limitCommands:
          type: boolean
        disableReports:
          type: boolean
        fixedEmail:
          type: boolean
        poiLayer:
          type: string
          nullable: true
        totpKey:
          type: string
          nullable: true
        temporary:
          type: boolean
        parentUserId:
          type: integer
          format: int64
          description: Parent user ID for sub-accounts
        subAccountType:
          type: string
          description: Type of sub-account (default is 'main')
        sendCredentials:
          type: boolean
          description: Whether to send credentials to the user
        dashboard:
          type: boolean
          description: Sub-account privilege for dashboard access
        history:
          type: boolean
          description: Sub-account privilege for history access
        reports:
          type: boolean
          description: Sub-account privilege for reports access
        tasks:
          type: boolean
          description: Sub-account privilege for tasks access
        rilogbook:
          type: boolean
          description: Sub-account privilege for RFID and iButton logbook access
        dtc:
          type: boolean
          description: Sub-account privilege for Diagnostic Trouble Codes access
        maintenance:
          type: boolean
          description: Sub-account privilege for maintenance access
        expenses:
          type: boolean
          description: Sub-account privilege for expenses access
        objectControl:
          type: boolean
          description: Sub-account privilege for object control access
        imageGallery:
          type: boolean
          description: Sub-account privilege for image gallery access
        chat:
          type: boolean
          description: Sub-account privilege for chat access
        deviceAccess:
          type: string
          nullable: true
          description: Comma-separated device IDs for access control
        markerAccess:
          type: string
          nullable: true
          description: Comma-separated marker IDs for access control
        routeAccess:
          type: string
          nullable: true
          description: Comma-separated route IDs for access control
        zoneAccess:
          type: string
          nullable: true
          description: Comma-separated zone IDs for access control
        autoUrlActive:
          type: boolean
          description: Whether auto-login URL is active
        autoUrlToken:
          type: string
          nullable: true
          description: Auto-login URL token
        attributes:
          type: object
          properties: {}
    Server:
      type: object
      properties:
        id:
          type: integer
          format: int64
        registration:
          type: boolean
        readonly:
          type: boolean
        deviceReadonly:
          type: boolean
        limitCommands:
          type: boolean
        map:
          type: string
        bingKey:
          type: string
        mapUrl:
          type: string
        poiLayer:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        zoom:
          type: integer
        version:
          type: string
        forceSettings:
          type: boolean
        coordinateFormat:
          type: string
        openIdEnabled:
          type: boolean
        openIdForce:
          type: boolean
        attributes:
          type: object
          properties: {}
    Command:
      type: object
      properties:
        id:
          type: integer
          format: int64
        deviceId:
          type: integer
          format: int64
        description:
          type: string
        type:
          type: string
        attributes:
          type: object
          properties: {}
    Configuration:
      type: object
      properties:
        id:
          type: integer
          format: int64
        configKey:
          type: string
          description: Configuration key name
        value:
          type: string
          description: Configuration value
        description:
          type: string
          description: Human-readable description of the configuration
    UserSmsConfig:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
          description: User ID this SMS configuration belongs to
        httpUrl:
          type: string
          description: SMS API service full URL for HTTP-based SMS providers
          nullable: true
        httpAuthorizationHeader:
          type: string
          description: SMS API authorization header name (default is 'Authorization')
          nullable: true
        httpAuthorization:
          type: string
          description: SMS API authorization header value (takes precedence over user/password)
          nullable: true
        httpUser:
          type: string
          description: SMS API basic authentication username
          nullable: true
        httpTemplate:
          type: string
          description: SMS API body template with {phone} and {message} placeholders
          nullable: true
        awsAccess:
          type: string
          description: AWS Access Key with SNS permission
          nullable: true
        awsRegion:
          type: string
          description: AWS Region for SNS service
          nullable: true
        enabled:
          type: boolean
          description: Whether this SMS configuration is enabled
          default: true
    Device:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        uniqueId:
          type: string
        status:
          type: string
        disabled:
          type: boolean
        lastUpdate:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
          nullable: true
        positionId:
          type: integer
          format: int64
          nullable: true
        groupId:
          type: integer
          format: int64
          nullable: true
        phone:
          type: string
          nullable: true
        model:
          type: string
          nullable: true
        contact:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
        attributes:
          type: object
          properties: {}
    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        groupId:
          type: integer
          format: int64
        attributes:
          type: object
          properties: {}
    Permission:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          description: User id, can be only first parameter
        deviceId:
          type: integer
          format: int64
          description: >-
            Device id, can be first parameter or second only in combination with
            userId
        groupId:
          type: integer
          format: int64
          description: >-
            Group id, can be first parameter or second only in combination with
            userId
        geofenceId:
          type: integer
          format: int64
          description: Geofence id, can be second parameter only
        notificationId:
          type: integer
          format: int64
          description: Notification id, can be second parameter only
        calendarId:
          type: integer
          format: int64
          description: >-
            Calendar id, can be second parameter only and only in combination
            with userId
        attributeId:
          type: integer
          format: int64
          description: Computed attribute id, can be second parameter only
        driverId:
          type: integer
          format: int64
          description: Driver id, can be second parameter only
        managedUserId:
          type: integer
          format: int64
          description: >-
            User id, can be second parameter only and only in combination with
            userId
        commandId:
          type: integer
          format: int64
          description: Saved command id, can be second parameter only
      description: >-
        This is a permission map that contain two object indexes. It is used to
        link/unlink objects. Order is important. Example: { deviceId:8,
        geofenceId: 16 }
    CommandType:
      type: object
      properties:
        type:
          type: string
    Geofence:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        area:
          type: string
          description: |
            Well-Known Text (WKT) format geometry:
            - CIRCLE (lat lng, radius) - for markers
            - POLYGON ((lat1 lng1, lat2 lng2, ...)) - for zones
            - LINESTRING (lat1 lng1, lat2 lng2, ...) - for routes
        calendarId:
          type: integer
          format: int64
        groupId:
          type: integer
          format: int64
          description: ID of the geofence group this geofence belongs to (null for no group)
          nullable: true
        attributes:
          type: object
          description: |
            JSON object for custom attributes:
            - type: "marker", "zone", or "route"
            - color: hex color code (e.g., "#FF5733")
            - icon: custom icon path for markers
            - visible: boolean for map visibility
            - nameVisible: boolean for name label visibility
            - polylineDistance: corridor width in meters for routes
          properties: {}
    GeofenceGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Name of the geofence group
        description:
          type: string
          description: Description of the group
          nullable: true
        attributes:
          type: object
          description: Additional custom attributes
          properties: {}
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        description:
          type: string
          nullable: true
        always:
          type: boolean
        commandId:
          type: integer
          format: int64
        notificators:
          type: string
        calendarId:
          type: integer
          format: int64
        attributes:
          type: object
          properties: {}
        # System message features
        systemAutohide:
          type: boolean
          description: Auto-hide notification after display
          default: false
        soundEnabled:
          type: boolean
          description: Enable sound alert
          default: false
        soundFile:
          type: string
          description: Sound file name (e.g., alarm1.mp3)
          nullable: true
        # Visual notification features
        arrowEnabled:
          type: boolean
          description: Enable arrow color change on map
          default: false
        arrowColor:
          type: string
          description: Arrow color value
          nullable: true
        listColorEnabled:
          type: boolean
          description: Enable list color change
          default: false
        listColor:
          type: string
          description: List color value in hex format (e.g., #FF0000)
          nullable: true
        # Multiple recipients
        emailAddresses:
          type: string
          description: Comma-separated email addresses
          nullable: true
          example: "user1@example.com,user2@example.com"
        smsNumbers:
          type: string
          description: Comma-separated phone numbers with country code
          nullable: true
          example: "+1234567890,+0987654321"
        # Template references
        emailTemplateId:
          type: integer
          format: int64
          description: Reference to user template for email notifications
          nullable: true
        smsTemplateId:
          type: integer
          format: int64
          description: Reference to user template for SMS notifications
          nullable: true
        # Duration control
        durationFromLastEvent:
          type: boolean
          description: Enable duration check to prevent notification spam
          default: false
        durationMinutes:
          type: integer
          description: Minutes to wait between same event notifications
          default: 0
        # Schedule control (Track-style inline scheduling)
        weekDays:
          type: string
          description: Comma-separated week days filter (1=enabled, 0=disabled). Format Mon,Tue,Wed,Thu,Fri,Sat,Sun
          nullable: true
          example: "1,1,1,1,1,0,0"
          pattern: '^[0-1],[0-1],[0-1],[0-1],[0-1],[0-1],[0-1]$'
        dayTime:
          type: string
          description: JSON string containing per-day time schedules with enabled/from/to fields
          nullable: true
          example: '{"mon":{"enabled":true,"from":"08:00","to":"17:00"},"tue":{"enabled":true,"from":"08:00","to":"17:00"},"wed":{"enabled":true,"from":"08:00","to":"17:00"},"thu":{"enabled":true,"from":"08:00","to":"17:00"},"fri":{"enabled":true,"from":"08:00","to":"17:00"},"sat":{"enabled":false,"from":"00:00","to":"24:00"},"sun":{"enabled":false,"from":"00:00","to":"24:00"}}'
        # Advanced conditions
        routeTrigger:
          type: string
          description: Route trigger mode
          enum:
            - enter
            - exit
            - both
          nullable: true
        zoneTrigger:
          type: string
          description: Zone/geofence trigger mode
          enum:
            - enter
            - exit
            - both
          nullable: true
        parameterConditions:
          type: string
          description: JSON string containing parameter/sensor conditions
          nullable: true
          example: '{"speed":{"operator":">","value":80}}'
        # Webhook
        webhookEnabled:
          type: boolean
          description: Enable webhook notifications
          default: false
        webhookUrl:
          type: string
          description: Webhook POST URL for custom integrations
          nullable: true
          example: "https://example.com/webhook"
    NotificationType:
      type: object
      properties:
        type:
          type: string
    SoundFile:
      type: object
      properties:
        name:
          type: string
          description: Sound file name
          example: "alarm1.mp3"
        size:
          type: integer
          format: int64
          description: File size in bytes
          example: 245632
        url:
          type: string
          description: Relative URL to access the sound file
          example: "/sounds/alarm1.mp3"
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        eventTime:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
        deviceId:
          type: integer
          format: int64
        positionId:
          type: integer
          format: int64
        geofenceId:
          type: integer
          format: int64
        maintenanceId:
          type: integer
        attributes:
          type: object
          properties: {}
    ReportSummary:
      type: object
      properties:
        deviceId:
          type: integer
          format: int64
        deviceName:
          type: string
        maxSpeed:
          type: number
          description: in knots
        averageSpeed:
          type: number
          description: in knots
        distance:
          type: number
          description: in meters
        spentFuel:
          type: number
          description: in liters
        engineHours:
          type: integer
    ReportTrips:
      type: object
      properties:
        deviceId:
          type: integer
          format: int64
        deviceName:
          type: string
        maxSpeed:
          type: number
          description: in knots
        averageSpeed:
          type: number
          description: in knots
        distance:
          type: number
          description: in meters
        spentFuel:
          type: number
          description: in liters
        duration:
          type: integer
        startTime:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
        startAddress:
          type: string
        startLat:
          type: number
        startLon:
          type: number
        endTime:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
        endAddress:
          type: string
        endLat:
          type: number
        endLon:
          type: number
        driverUniqueId:
          type: string
        driverName:
          type: string
    ReportStops:
      type: object
      properties:
        deviceId:
          type: integer
          format: int64
        deviceName:
          type: string
        duration:
          type: integer
        startTime:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
        address:
          type: string
        lat:
          type: number
        lon:
          type: number
        endTime:
    Service:
      type: object
      properties:
        deviceId:
          type: integer
        name:
          type: string
        dataList:
          type: boolean
        popup:
          type: boolean
        odometerIntervalKm:
          type: number
        lastServiceKm:
          type: number
        intervalEngineHours:
          type: number
        lastServiceEngineHours:
          type: number
        intervalDays:
          type: integer
        lastServiceDate:
          type: string
          format: date-time
        triggerOdometerLeftKm:
          type: number
        triggerEngineHoursLeft:
          type: number
        triggerDaysLeft:
          type: integer
        updateLastServiceOdometer:
          type: boolean
        customReminders:
          type: string
        status:
          type: string
    Statistics:
      type: object
      properties:
        captureTime:
          type: string
          description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
          format: date-time
        activeUsers:
          type: integer
        activeDevices:
          type: integer
        requests:
          type: integer
        messagesReceived:
          type: integer
        messagesStored:
          type: integer
    DeviceAccumulators:
      type: object
      properties:
        deviceId:
          type: integer
          format: int64
        totalDistance:
          type: number
          description: in meters
        hours:
          type: number
    Calendar:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        data:
          type: string
          description: base64 encoded in iCalendar format
        attributes:
          type: object
          properties: {}
    Attribute:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        attribute:
          type: string
        expression:
          type: string
        type:
          type: string
          description: String|Number|Boolean
    Driver:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        uniqueId:
          type: string
        attributes:
          type: object
          properties: {}
    Maintenance:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        start:
          type: number
        period:
          type: number
        attributes:
          type: object
          properties: {}
    Expense:
      type: object
      required:
        - name
        - deviceId
        - expenseDate
        - quantity
        - cost
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the expense
        name:
          type: string
          maxLength: 255
          description: Expense name or title
          example: "Fuel Refill"
        deviceId:
          type: integer
          format: int64
          description: Device ID associated with this expense
          example: 123
        expenseDate:
          type: string
          format: date-time
          description: Date and time of expense in ISO 8601 format
          example: "2025-10-10T10:00:00Z"
        quantity:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          description: Quantity of items or units
          example: 50.5
        cost:
          type: number
          format: double
          minimum: 0
          description: Cost per unit
          example: 1.25
        supplier:
          type: string
          maxLength: 255
          description: Supplier or vendor name
          example: "Shell Gas Station"
        buyer:
          type: string
          maxLength: 255
          description: Person who made the purchase
          example: "John Doe"
        odometer:
          type: number
          format: double
          minimum: 0
          description: Odometer reading in meters at time of expense
          example: 125430.5
        engineHours:
          type: number
          format: double
          minimum: 0
          description: Engine hours at time of expense
          example: 3250.5
        description:
          type: string
          maxLength: 4000
          description: Additional notes or description
          example: "Regular fuel refill at highway station"
        attributes:
          type: object
          properties: {}
          description: Custom attributes (e.g., currency, category, receipt number)
          example:
            currency: "USD"
            category: "fuel"
            receiptNumber: "REC-2025-001"
    Template:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Template identifier (e.g., "event_email", "account_registration")
        language:
          type: string
          description: Language code (e.g., "english", "spanish")
        subject:
          type: string
          description: Email subject template with variable placeholders
        message:
          type: string
          description: Message body template with variable placeholders
        attributes:
          type: object
          properties: {}
          description: Additional template attributes
    UserTemplate:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
          description: ID of the user who owns this template
        name:
          type: string
          description: Template identifier for user customization
        description:
          type: string
          description: User-friendly description of the template
        subject:
          type: string
          description: Custom email subject template with variable placeholders
        message:
          type: string
          description: Custom message body template with variable placeholders
        attributes:
          type: object
          properties: {}
          description: Additional template attributes
  parameters:
    entityId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    all:
      name: all
      in: query
      description: Can only be used by admins or managers to fetch all entities
      schema:
        type: boolean
    refresh:
      name: refresh
      in: query
      schema:
        type: boolean
    userId:
      name: userId
      in: query
      description: Standard users can use this only with their own _userId_
      schema:
        type: integer
        format: int64
    deviceId:
      name: deviceId
      in: query
      description: Standard users can use this only with _deviceId_s, they have access to
      schema:
        type: integer
        format: int64
    groupId:
      name: groupId
      in: query
      description: Standard users can use this only with _groupId_s, they have access to
      schema:
        type: integer
        format: int64
    deviceIdArray:
      name: deviceId
      in: query
      style: form
      explode: true
      schema:
        type: array
        items:
          type: integer
          format: int64
    groupIdArray:
      name: groupId
      in: query
      style: form
      explode: true
      schema:
        type: array
        items:
          type: integer
          format: int64
    fromTime:
      name: from
      in: query
      description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
      required: true
      schema:
        type: string
        format: date-time
    toTime:
      name: to
      in: query
      description: in ISO 8601 format. eg. `1963-11-22T18:30:00Z`
      required: true
      schema:
        type: string
        format: date-time
  requestBodies:
    Device:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Device"
      required: true
    Permission:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Permission"
      required: true
    Group:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
      required: true
    Geofence:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Geofence"
      required: true
    Calendar:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Calendar"
      required: true
    Attribute:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Attribute"
      required: true
    Driver:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Driver"
      required: true
    Command:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Command"
      required: true
    Notification:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
      required: true
    Maintenance:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Maintenance"
      required: true
    Template:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Template"
      required: true
    UserTemplate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserTemplate"
      required: true
    Configuration:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Configuration"
      required: true
    UserSmsConfig:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserSmsConfig"
      required: true
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    ApiKey:
      type: http
      scheme: bearer
